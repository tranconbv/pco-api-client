# coding: utf-8

"""
    CloudAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.private_cloud_ike_version import PrivateCloudIKEVersion
from openapi_client.models.subnet import Subnet

class PrivateCloud(BaseModel):
    """
    PrivateCloud
    """
    location: Optional[StrictStr] = Field(None, alias="Location")
    status: Optional[StrictStr] = Field(None, alias="Status")
    whitelist: Optional[StrictStr] = Field(None, alias="Whitelist")
    ike_version: Optional[PrivateCloudIKEVersion] = Field(None, alias="IKE_Version")
    subnets: Optional[conlist(Subnet)] = Field(None, alias="Subnets")
    __properties = ["Location", "Status", "Whitelist", "IKE_Version", "Subnets"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('BlockedForEdit', 'WaitForCreation', 'InProgress', 'Active', 'Error', 'WaitForDeletion', 'Deleted', 'WaitForEdit'):
            raise ValueError("must be one of enum values ('BlockedForEdit', 'WaitForCreation', 'InProgress', 'Active', 'Error', 'WaitForDeletion', 'Deleted', 'WaitForEdit')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrivateCloud:
        """Create an instance of PrivateCloud from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ike_version
        if self.ike_version:
            _dict['IKE_Version'] = self.ike_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subnets (list)
        _items = []
        if self.subnets:
            for _item in self.subnets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Subnets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrivateCloud:
        """Create an instance of PrivateCloud from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PrivateCloud.parse_obj(obj)

        _obj = PrivateCloud.parse_obj({
            "location": obj.get("Location"),
            "status": obj.get("Status"),
            "whitelist": obj.get("Whitelist"),
            "ike_version": PrivateCloudIKEVersion.from_dict(obj.get("IKE_Version")) if obj.get("IKE_Version") is not None else None,
            "subnets": [Subnet.from_dict(_item) for _item in obj.get("Subnets")] if obj.get("Subnets") is not None else None
        })
        return _obj


