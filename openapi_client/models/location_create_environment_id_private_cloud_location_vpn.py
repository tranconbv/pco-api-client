# coding: utf-8

"""
    CloudAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.location_create_environment_id_private_cloud_location_vpnike_version import LocationCreateEnvironmentIdPrivateCloudLocationVPNIKEVersion

class LocationCreateEnvironmentIdPrivateCloudLocationVPN(BaseModel):
    """
    LocationCreateEnvironmentIdPrivateCloudLocationVPN
    """
    location: Optional[StrictStr] = Field(None, alias="Location")
    peer_ip: Optional[StrictStr] = Field(None, alias="Peer_Ip")
    gate_way_ip: Optional[StrictStr] = Field(None, alias="GateWay_Ip")
    subnet: Optional[StrictStr] = Field(None, alias="Subnet")
    status: Optional[StrictStr] = Field(None, alias="Status")
    ike_version: Optional[LocationCreateEnvironmentIdPrivateCloudLocationVPNIKEVersion] = Field(None, alias="IKE_Version")
    __properties = ["Location", "Peer_Ip", "GateWay_Ip", "Subnet", "Status", "IKE_Version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LocationCreateEnvironmentIdPrivateCloudLocationVPN:
        """Create an instance of LocationCreateEnvironmentIdPrivateCloudLocationVPN from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ike_version
        if self.ike_version:
            _dict['IKE_Version'] = self.ike_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LocationCreateEnvironmentIdPrivateCloudLocationVPN:
        """Create an instance of LocationCreateEnvironmentIdPrivateCloudLocationVPN from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LocationCreateEnvironmentIdPrivateCloudLocationVPN.parse_obj(obj)

        _obj = LocationCreateEnvironmentIdPrivateCloudLocationVPN.parse_obj({
            "location": obj.get("Location"),
            "peer_ip": obj.get("Peer_Ip"),
            "gate_way_ip": obj.get("GateWay_Ip"),
            "subnet": obj.get("Subnet"),
            "status": obj.get("Status"),
            "ike_version": LocationCreateEnvironmentIdPrivateCloudLocationVPNIKEVersion.from_dict(obj.get("IKE_Version")) if obj.get("IKE_Version") is not None else None
        })
        return _obj


