# coding: utf-8

"""
    CloudAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PrivateCloudPutPrivateCloud(BaseModel):
    """
    PrivateCloudPutPrivateCloud
    """
    cloud_status: Optional[StrictStr] = Field(None, alias="CloudStatus")
    public_ip: Optional[StrictStr] = Field(None, alias="Public_IP")
    internal_ip: Optional[StrictStr] = Field(None, alias="Internal_IP")
    subnet: Optional[StrictStr] = Field(None, alias="Subnet")
    vpn_gateway_ip: Optional[StrictStr] = Field(None, alias="VPNGateway_IP")
    region: Optional[StrictStr] = Field(None, alias="Region")
    whitelist: Optional[StrictStr] = Field(None, alias="Whitelist")
    vm_name: Optional[StrictStr] = Field(None, alias="VM_Name")
    vm_user: Optional[StrictStr] = Field(None, alias="VM_User")
    vm_password: Optional[StrictStr] = Field(None, alias="VM_Password")
    database_user: Optional[StrictStr] = Field(None, alias="Database_User")
    boxwise_url: Optional[StrictStr] = Field(None, alias="Boxwise_url")
    __properties = ["CloudStatus", "Public_IP", "Internal_IP", "Subnet", "VPNGateway_IP", "Region", "Whitelist", "VM_Name", "VM_User", "VM_Password", "Database_User", "Boxwise_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrivateCloudPutPrivateCloud:
        """Create an instance of PrivateCloudPutPrivateCloud from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrivateCloudPutPrivateCloud:
        """Create an instance of PrivateCloudPutPrivateCloud from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PrivateCloudPutPrivateCloud.parse_obj(obj)

        _obj = PrivateCloudPutPrivateCloud.parse_obj({
            "cloud_status": obj.get("CloudStatus"),
            "public_ip": obj.get("Public_IP"),
            "internal_ip": obj.get("Internal_IP"),
            "subnet": obj.get("Subnet"),
            "vpn_gateway_ip": obj.get("VPNGateway_IP"),
            "region": obj.get("Region"),
            "whitelist": obj.get("Whitelist"),
            "vm_name": obj.get("VM_Name"),
            "vm_user": obj.get("VM_User"),
            "vm_password": obj.get("VM_Password"),
            "database_user": obj.get("Database_User"),
            "boxwise_url": obj.get("Boxwise_url")
        })
        return _obj


